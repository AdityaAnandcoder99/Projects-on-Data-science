# -*- coding: utf-8 -*-
"""task_5_datascience_the_spark_foundation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gmclb0CRGvZVGKXgFr8yPlQpvX2xOQwD
"""

import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt 
import seaborn as sns

match_df = pd.read_csv('/content/matches.csv')
score_df = pd.read_csv('/content/deliveries.csv')

match_df.head()

score_df.head()

plt.figure(figsize=(12,8))
sns.countplot(x='season', data=match_df)
plt.show()

plt.figure(figsize=(20,6))
sns.countplot(match_df['city'], order=match_df['city'].value_counts().index, palette= 'Set2')
count = 0
cities = pd.DataFrame(match_df['city'].value_counts())
cities['name'] = match_df['city'].value_counts().index
for i in cities['city']:
  plt.text(count-0.2, i-2, str(i), rotation=90, color='black', size=12)
  count+=1

plt.xlabel('Cities')
plt.ylabel('Number of matches')
plt.title("Number of matches hosted in each city",fontsize=15)
plt.show()

fig = plt.gcf()
fig.set_size_inches(18.5, 9)
plt.xticks(rotation=90, fontsize=11.5)
plt.yticks(fontsize=16)
sns.countplot(match_df['venue'], order=match_df['venue'].value_counts().index, palette= 'Set2')
count = 0
venues = pd.DataFrame(match_df['venue'].value_counts())
venues['name'] = match_df['venue'].value_counts().index
for i in venues['venue']:
  plt.text(count-0.2, i-2, str(i), rotation=90, color='black', size=12)
  count+=1

plt.xlabel('vanues')
plt.ylabel('Number of matches')
plt.title("Number of matches hosted in each stadium",fontsize=15)
plt.show()

plt.figure(figsize=(14,8))
sns.countplot(x='venue', data=match_df)
plt.xticks(rotation='vertical')
plt.show()

plt.figure(figsize=(12,8))
sns.countplot(x='winner', data=match_df)
plt.xticks(rotation='vertical')
plt.show()

temp_df = match_df.drop_duplicates(subset=['season'], keep='last')[['season', 'winner']].reset_index(drop=True)
temp_df

def autolabel(rects):
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2., 1.02*height,
                '%d' % int(height),
                ha='center', va='bottom')

temp_series = match_df.player_of_match.value_counts()[:10]

labels = np.array(temp_series.index)
ind = np.arange(len(labels))
width = 0.9
fig, ax = plt.subplots()
rects = ax.bar(ind, np.array(temp_series), width=width, color='orange')
ax.set_xticks(ind+((width)/2.))
ax.set_xticklabels(labels, rotation='vertical')
ax.set_ylabel("Count")
ax.set_title("Top player of the match awardees")
autolabel(rects)
plt.show()

temp_df = score_df.groupby('batsman')['batsman_runs'].agg(lambda x: (x==0).sum()).reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)
temp_df = temp_df.iloc[:15,:10]

labels = np.array(temp_df['batsman'])
ind = np.arange(len(labels))
width = 0.9
fig, ax = plt.subplots()
rects = ax.bar(ind, np.array(temp_df['batsman_runs']), width=width, color='c')
ax.set_xticks(ind+((width)/2.0))
ax.set_xticklabels(labels, rotation='vertical')
ax.set_ylabel("Count")
ax.set_title("Batsman with most number of dot balls.!")
autolabel(rects)
plt.show()

plt.figure(figsize=(12,6))
sns.countplot(x='dismissal_kind', data=score_df)
plt.xticks(rotation='vertical')
plt.show()

plt.figure(figsize=(12,6))
data = match_df.winner.value_counts()
sns.barplot(y = data.index, x = data)
plt.title("Most successful IPL team", fontsize=15)
plt.xlabel("NUmber of wins")
plt.ylabel("IPL Teams")